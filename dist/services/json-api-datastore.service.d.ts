import { Http, Headers, RequestOptions, Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import { JsonApiModel } from '../models/json-api.model';
import { DocumentModel } from '../models/document.model';
import { CollectionModel } from '../models/collection.model';
export declare type ModelType<T extends JsonApiModel> = {
    new (datastore: JsonApiDatastore, data: any): T;
};
export declare class JsonApiDatastore {
    protected http: Http;
    private _headers;
    private _store;
    constructor(http: Http);
    query<T extends JsonApiModel>(modelType: ModelType<T>, params?: any, headers?: Headers): Observable<CollectionModel<T>>;
    hasManyLink<T extends JsonApiModel>(modelType: ModelType<T>, url: string, params?: any, headers?: Headers): Observable<CollectionModel<T>>;
    findRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string, params?: any, headers?: Headers): Observable<DocumentModel<T>>;
    belongsToLink<T extends JsonApiModel>(modelType: ModelType<T>, url: string, params?: any, headers?: Headers): Observable<DocumentModel<T>>;
    createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T;
    saveRecord<T extends JsonApiModel>(attributesMetadata: any, model?: T, params?: any, headers?: Headers): Observable<DocumentModel<T>>;
    deleteRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string, headers?: Headers): Observable<Response>;
    peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T;
    peekAll<T extends JsonApiModel>(modelType: ModelType<T>): T[];
    headers: Headers;
    addToStore(models: JsonApiModel | JsonApiModel[]): void;
    private buildUrl<T>(modelType, params?, id?);
    static makeUrl(url: string, params?: any): string;
    static toQueryString(params: any): string;
    private extractQueryData<T>(res, modelType);
    private extractRecordData<T>(res, modelType, model?);
    getOptions(customHeaders?: Headers): RequestOptions;
    private updateRelationships(model, relationships);
    private static getRelationships(data);
    protected static handleError(error: any): ErrorObservable;
    private static fromArrayToHash(models);
    private static resetMetadataAttributes<T>(res, attributesMetadata, modelType);
    setBaseUrl(baseUrl: string): void;
    getBaseUrl(): string;
}
